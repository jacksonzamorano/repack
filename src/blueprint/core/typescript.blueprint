[meta id]typescript[/meta]
[meta name]Typescript (interfaces)[/meta]

[define int64]number[/define]
[define int32]number[/define]
[define float64]number[/define]
[define string]string[/define]
[define boolean]boolean[/define]
[define datetime]Date[/define]
[define uuid]string[/define]
[link custom]import type { $ } from './$'[/link]

[ each object ]
[file][name].ts[/file]
[imports]

export interface [name] {
[each field][br]
	[name.camelcase][if optional]?[/if]: [type]
[/each][br]
}
[/each]

[each enum]
[file][name].ts[/file]

export type [name] = 

[each case]
'[name]'[if sep] | [/if]
[/each]

[/each]

[file]index.ts[/file]

[each object]
export type { [name] } from '[name].ts'[br]
[/each]
[each enum]
export type { [name] } from '[name].ts'[br]
[/each]

