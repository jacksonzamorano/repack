blueprint "debug.blueprint"
output debug @test;
output postgres @test;
output go @test {
	package main
}
output typescript @"test/ts";

snippet base {
	id uuid db:pk
	created_date datetime db:default("NOW()")
}

enum UserType #model {
	Admin
	User
	Guest
}

struct User @users #model {
	!base

	last_login datetime?
	name string
	email string
	user_type UserType
	subscription_id string?
	email_id string db:as("LOWER(name) || '_' || LOWER(email)")


	query UserByEmail(_email string) = "SELECT $fields FROM $locations WHERE $email = $_email" : one
	query UsersByType(_typ UserType) = "SELECT $fields FROM $locations WHERE $user_type = $_typ" : many
	query DeleteUserById(_id uuid) = "DELETE FROM $table WHERE $id = $_id"
	update UpdateUserEmail(_id uuid, _email string) = "SET $email = $_email WHERE $id = $_id"

	insert CreateUser (id, name, email, user_type) : one
}

struct Token @tokens #model {
	!base
	user_id uuid db:fk("users", "id")
	token_value uuid
}

struct UserWithToken: User {
	join(t Token) = "INNER JOIN $name ON $super.id = $t.user_id"
	user_id super.id
	token_value t.token_value

	query UserToken(_id uuid) = "SELECT $fields FROM $locations WHERE $user_id = $_id" : many
}
